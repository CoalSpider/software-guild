/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eulerproblems;

import java.math.BigDecimal;
import java.math.BigInteger;

/**
 *
 * @author Ben Norman
 */
public class Two {
//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

// odd even odd odd event odd odd event odd odd even... so on
    public static void main(String[] args) {
        BigInteger evenTotal = new BigInteger("2");
        BigInteger primeTotal = new BigInteger("2");
        BigInteger a = new BigInteger("1");
        BigInteger b = new BigInteger("2");
        BigInteger next = a.add(b);
        BigInteger max = new BigInteger(Long.MAX_VALUE + "");
        //  while (next <= 4_000_000) {
        while (next.compareTo(max) < 1) {
            if (next.remainder(new BigInteger("2")).compareTo(BigInteger.ZERO) == 0) {
                evenTotal = evenTotal.add(next);
                System.out.print("Even: ");
            } else {
                System.out.print("Odd: ");
                if (isPrime(next)) {
                    primeTotal = primeTotal.add(next);
                    System.out.print("Prime: ");
                }
            }
            System.out.println("Next=" + next);
            a = b;
            b = next;
            next = a.add(b);
        }

        System.out.println("even number total = " + evenTotal);
        System.out.println("prime number total = " + primeTotal);
    }

    private static boolean isPrime(BigInteger numberToFactor) {
        int count = 0;
        // factor the number
        BigInteger max = sqrt(numberToFactor);//numberToFactor.add(BigInteger.ONE).divide(new BigInteger("2"));
        for (BigInteger i = BigInteger.ONE; i.compareTo(max) < 1; i = i.add(new BigInteger("2"))) {
            if (numberToFactor.remainder(i).compareTo(BigInteger.ZERO) == 0) {
                count++;
                if (count > 1) {
                    return false;
                }
            }
        }
        return true;
    }
// https://stackoverflow.com/questions/5811151/why-do-we-check-up-to-the-square-root-of-a-prime-number-to-determine-if-it-is-pr
    private static BigInteger sqrt(BigInteger x) {
        BigInteger div = BigInteger.ZERO.setBit(x.bitLength() / 2);
        BigInteger div2 = div;
        // Loop until we hit the same value twice in a row, or wind
        // up alternating.
        for (;;) {
            BigInteger y = div.add(x.divide(div)).shiftRight(1);
            if (y.equals(div) || y.equals(div2)) {
                return y;
            }
            div2 = div;
            div = y;
        }
    }
}
