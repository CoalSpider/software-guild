/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sg.dto;

import com.sg.common.FlooringUtil;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.Objects;

/**
 *
 * @author Ben Norman
 */
public class Order {

    private static final BigDecimal DELETED_ORDER_TOTAL = BigDecimal.ZERO;
    // generated by dao, will be unqiue
    private int orderNumber;
    private String customerName;
    private BigDecimal areaInSquareFeet;
    // calculated data
    private BigDecimal materialCost;
    private BigDecimal laborCost;
    private BigDecimal tax;
    private BigDecimal total;
    // the state the order was placed in/for
    private State state;
    // the product ordered
    private Product product;

    public int getOrderNumber() {
        return orderNumber;
    }

    public void setOrderNumber(int orderNumber) {
        this.orderNumber = orderNumber;
    }

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public State getState() {
        return state;
    }

    public void setState(State state) {
        this.state = state;
        nullCalculated();
    }

    public Product getProduct() {
        return product;
    }

    public void setProduct(Product product) {
        this.product = product;
        nullCalculated();
    }

    public BigDecimal getAreaInSquareFeet() {
        return areaInSquareFeet;
    }

    public void setAreaInSquareFeet(BigDecimal areaInSquareFeet) {
        this.areaInSquareFeet = areaInSquareFeet;
        nullCalculated();
    }

    public void setMaterialCost(BigDecimal materialCost) {
        this.materialCost = materialCost;
    }

    public void setLaborCost(BigDecimal laborCost) {
        this.laborCost = laborCost;
    }

    public void setTax(BigDecimal tax) {
        this.tax = tax;
    }

    public void setTotal(BigDecimal total) {
        if (DELETED_ORDER_TOTAL.equals(this.total)) {
            // do nothing
        } else {
            this.total = total;
        }
    }

    public BigDecimal getMaterialCost() {
        if (materialCost == null) {
            // make sure scale is 2
            setMaterialCost(product.getCostPerSquareFoot().multiply(areaInSquareFeet,FlooringUtil.MONEY_CONTEXT));
        }
        return materialCost;
    }

    public BigDecimal getLaborCost() {
        if (laborCost == null) {
            // make sure scale is 2
            setLaborCost(product.getLaborCostPerSquareFoot().multiply(areaInSquareFeet,FlooringUtil.MONEY_CONTEXT));
        }
        return laborCost;
    }

    public BigDecimal getTax() {
        if (tax == null) {
            // tax rates are stored as a percent we need to convert them
            BigDecimal taxRate = FlooringUtil.percentToDecimal(state.getTaxRate());
            // make sure scale is 2
            setTax(getMaterialCost().add(getLaborCost()).multiply(taxRate, FlooringUtil.MONEY_CONTEXT));
        }
        return tax;
    }

    public BigDecimal getTotal() {
        if (total == null) {
            // make sure scale is 2
            setTotal(getMaterialCost().add(getLaborCost()).add(getTax(),FlooringUtil.MONEY_CONTEXT));
        }
        return total;
    }

    // when the user edits data we want to null out calculated fields so they are recalculated next time we call the Fgetters
    private void nullCalculated() {
        materialCost = null;
        laborCost = null;
        tax = null;
        total = null;
    }
    
    @Override
    public int hashCode() {
        int hash = 5;
        hash = 47 * hash + this.orderNumber;
        hash = 47 * hash + Objects.hashCode(this.customerName);
        hash = 47 * hash + Objects.hashCode(this.areaInSquareFeet);
        hash = 47 * hash + Objects.hashCode(this.materialCost);
        hash = 47 * hash + Objects.hashCode(this.laborCost);
        hash = 47 * hash + Objects.hashCode(this.tax);
        hash = 47 * hash + Objects.hashCode(this.total);
        hash = 47 * hash + Objects.hashCode(this.state);
        hash = 47 * hash + Objects.hashCode(this.product);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Order other = (Order) obj;
        if (this.orderNumber != other.orderNumber) {
            return false;
        }
        if (!Objects.equals(this.customerName, other.customerName)) {
            return false;
        }
        // checks plain string to check equality properly between exponential and non exponential forms
        if (!Objects.equals(this.areaInSquareFeet.toPlainString(), other.areaInSquareFeet.toPlainString())) {
            return false;
        }
        // checks plain string to check equality properly between exponential and non exponential forms
        if (!Objects.equals(this.materialCost.toPlainString(), other.materialCost.toPlainString())) {
            return false;
        }
        // checks plain string to check equality properly between exponential and non exponential forms
        if (!Objects.equals(this.laborCost.toPlainString(), other.laborCost.toPlainString())) {
            return false;
        }
        // checks plain string to check equality properly between exponential and non exponential forms
        if (!Objects.equals(this.tax.toPlainString(), other.tax.toPlainString())) {
            return false;
        }
        // checks plain string to check equality properly between exponential and non exponential forms
        if (!Objects.equals(this.total.toPlainString(), other.total.toPlainString())) {
            return false;
        }
        if (!Objects.equals(this.state, other.state)) {
            return false;
        }
        if (!Objects.equals(this.product, other.product)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Order{" + "orderNumber=" + orderNumber + ", customerName=" + customerName + ", areaInSquareFeet=" + areaInSquareFeet + ", materialCost=" + materialCost + ", laborCost=" + laborCost + ", tax=" + tax + ", total=" + total + ", state=" + state + ", product=" + product + '}';
    }
    
}
